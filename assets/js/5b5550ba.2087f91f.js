"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4808],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=i.createContext({}),p=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},y=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),y=p(n),m=r,f=y["".concat(d,".").concat(m)]||y[m]||u[m]||o;return n?i.createElement(f,l(l({ref:t},s),{},{components:n})):i.createElement(f,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=y;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}y.displayName="MDXCreateElement"},80777:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var i=n(83117),r=n(80102),o=(n(67294),n(3905)),l=["components"],a={title:"EntityRepository API"},d=void 0,p={unversionedId:"repositories-api",id:"version-4.5/repositories-api",title:"EntityRepository API",description:"find(where FindOptions): Promise",source:"@site/versioned_docs/version-4.5/repositories-api.md",sourceDirName:".",slug:"/repositories-api",permalink:"/docs/4.5/repositories-api",draft:!1,editUrl:"https://github.com/mikro-orm/mikro-orm/edit/master/docs/versioned_docs/version-4.5/repositories-api.md",tags:[],version:"4.5",lastUpdatedBy:"Renovate Bot",lastUpdatedAt:1653271516,formattedLastUpdatedAt:"5/23/2022",frontMatter:{title:"EntityRepository API"}},s={},u=[{value:"<code>find(where: FilterQuery&lt;T&gt;, options?: FindOptions): Promise&lt;T[]&gt;</code>",id:"findwhere-filterqueryt-options-findoptions-promiset",level:4},{value:"<code>find(where: FilterQuery&lt;T&gt;, populate?: string[], orderBy?: { [k: string]: QueryOrder }, limit?: number, offset?: number): Promise&lt;T[]&gt;</code>",id:"findwhere-filterqueryt-populate-string-orderby--k-string-queryorder--limit-number-offset-number-promiset",level:4},{value:"<code>findAndCount(where: FilterQuery&lt;T&gt;, populate?: string[], orderBy?: { [k: string]: QueryOrder }, limit?: number, offset?: number): Promise&lt;T[]&gt;</code>",id:"findandcountwhere-filterqueryt-populate-string-orderby--k-string-queryorder--limit-number-offset-number-promiset",level:4},{value:"<code>findAll(options?: FindOptions): Promise&lt;T[]&gt;</code>",id:"findalloptions-findoptions-promiset",level:4},{value:"<code>findAll(populate?: string[], orderBy?: { [k: string]: QueryOrder }, limit?: number, offset?: number): Promise&lt;T[]&gt;</code>",id:"findallpopulate-string-orderby--k-string-queryorder--limit-number-offset-number-promiset",level:4},{value:"<code>findOne(where: FilterQuery&lt;T&gt; | string, populate?: string[]): Promise&lt;T | null&gt;</code>",id:"findonewhere-filterqueryt--string-populate-string-promiset--null",level:4},{value:"<code>findOneOrFail(where: FilterQuery&lt;T&gt; | string, populate?: string[]): Promise&lt;T&gt;</code>",id:"findoneorfailwhere-filterqueryt--string-populate-string-promiset",level:4},{value:"<code>merge(data: EntityData&lt;T&gt;): T</code>",id:"mergedata-entitydatat-t",level:4},{value:"<code>getReference(id: string): T</code>",id:"getreferenceid-string-t",level:4},{value:"<code>count(where?: FilterQuery&lt;T&gt;): Promise&lt;number&gt;</code>",id:"countwhere-filterqueryt-promisenumber",level:4},{value:"<code>persist(entity: AnyEntity | AnyEntity[]): Promise&lt;void&gt;</code>",id:"persistentity-anyentity--anyentity-promisevoid",level:4},{value:"<code>persistAndFlush(entity: AnyEntity | AnyEntity[]): Promise&lt;void&gt;</code>",id:"persistandflushentity-anyentity--anyentity-promisevoid",level:4},{value:"<code>persistLater(entity: AnyEntity | AnyEntity[]): void</code>",id:"persistlaterentity-anyentity--anyentity-void",level:4},{value:"<code>flush(): Promise&lt;void&gt;</code>",id:"flush-promisevoid",level:4},{value:"<code>remove(where: AnyEntity | Reference&lt;AnyEntity&gt; | (AnyEntity | Reference&lt;AnyEntity&gt;)[]): Promise&lt;void&gt;</code>",id:"removewhere-anyentity--referenceanyentity--anyentity--referenceanyentity-promisevoid",level:4},{value:"<code>removeAndFlush(entity: AnyEntity): Promise&lt;void&gt;</code>",id:"removeandflushentity-anyentity-promisevoid",level:4},{value:"<code>removeLater(entity: AnyEntity): void</code>",id:"removelaterentity-anyentity-void",level:4},{value:"<code>canPopulate(property: string): boolean</code>",id:"canpopulateproperty-string-boolean",level:4}],y={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"findwhere-filterqueryt-options-findoptions-promiset"},(0,o.kt)("inlineCode",{parentName:"h4"},"find(where: FilterQuery<T>, options?: FindOptions): Promise<T[]>")),(0,o.kt)("p",null,"Returns array of entities found for given condition. You can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"FindOptions")," to request\npopulation of referenced entities or control the pagination:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface FindOptions {\n  populate?: string[];\n  orderBy?: { [k: string]: QueryOrder };\n  limit?: number;\n  offset?: number;\n  schema?: string;\n}\n")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"findwhere-filterqueryt-populate-string-orderby--k-string-queryorder--limit-number-offset-number-promiset"},(0,o.kt)("inlineCode",{parentName:"h4"},"find(where: FilterQuery<T>, populate?: string[], orderBy?: { [k: string]: QueryOrder }, limit?: number, offset?: number): Promise<T[]>")),(0,o.kt)("p",null,"Same as previous ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," method, just with dedicated parameters for ",(0,o.kt)("inlineCode",{parentName:"p"},"populate"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"orderBy"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"limit"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"offset"),"."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"findandcountwhere-filterqueryt-populate-string-orderby--k-string-queryorder--limit-number-offset-number-promiset"},(0,o.kt)("inlineCode",{parentName:"h4"},"findAndCount(where: FilterQuery<T>, populate?: string[], orderBy?: { [k: string]: QueryOrder }, limit?: number, offset?: number): Promise<T[]>")),(0,o.kt)("p",null,"Combination of ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," methods. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"findalloptions-findoptions-promiset"},(0,o.kt)("inlineCode",{parentName:"h4"},"findAll(options?: FindOptions): Promise<T[]>")),(0,o.kt)("p",null,"Returns all entities for given type. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"findallpopulate-string-orderby--k-string-queryorder--limit-number-offset-number-promiset"},(0,o.kt)("inlineCode",{parentName:"h4"},"findAll(populate?: string[], orderBy?: { [k: string]: QueryOrder }, limit?: number, offset?: number): Promise<T[]>")),(0,o.kt)("p",null,"Same as previous ",(0,o.kt)("inlineCode",{parentName:"p"},"findAll")," method, just with dedicated parameters for ",(0,o.kt)("inlineCode",{parentName:"p"},"populate"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"orderBy"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"limit"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"offset"),"."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"findonewhere-filterqueryt--string-populate-string-promiset--null"},(0,o.kt)("inlineCode",{parentName:"h4"},"findOne(where: FilterQuery<T> | string, populate?: string[]): Promise<T | null>")),(0,o.kt)("p",null,"Finds an entity by given ",(0,o.kt)("inlineCode",{parentName:"p"},"where")," condition. You can use primary key as ",(0,o.kt)("inlineCode",{parentName:"p"},"where")," value, then\nif the entity is already managed, no database call will be made. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"findoneorfailwhere-filterqueryt--string-populate-string-promiset"},(0,o.kt)("inlineCode",{parentName:"h4"},"findOneOrFail(where: FilterQuery<T> | string, populate?: string[]): Promise<T>")),(0,o.kt)("p",null,"Just like ",(0,o.kt)("inlineCode",{parentName:"p"},"findOne"),", but throws when entity not found, so it always resolves to given entity.\nYou can customize the error either globally via ",(0,o.kt)("inlineCode",{parentName:"p"},"findOneOrFailHandler")," option, or locally via\n",(0,o.kt)("inlineCode",{parentName:"p"},"failHandler")," option in ",(0,o.kt)("inlineCode",{parentName:"p"},"findOneOrFail")," call."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"mergedata-entitydatat-t"},(0,o.kt)("inlineCode",{parentName:"h4"},"merge(data: EntityData<T>): T")),(0,o.kt)("p",null,"Adds given entity to current Identity Map. After merging, entity becomes managed.\nThis is useful when you want to work with cached entities. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"getreferenceid-string-t"},(0,o.kt)("inlineCode",{parentName:"h4"},"getReference(id: string): T")),(0,o.kt)("p",null,"Gets a reference to the entity identified by the given type and identifier without actually\nloading it, if the entity is not yet loaded."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"countwhere-filterqueryt-promisenumber"},(0,o.kt)("inlineCode",{parentName:"h4"},"count(where?: FilterQuery<T>): Promise<number>")),(0,o.kt)("p",null,"Gets count of entities matching the ",(0,o.kt)("inlineCode",{parentName:"p"},"where")," condition. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"persistentity-anyentity--anyentity-promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"persist(entity: AnyEntity | AnyEntity[]): Promise<void>")),(0,o.kt)("p",null,"Tells the EntityManager to make an instance managed and persistent. The entity will be\nentered into the database at or before transaction commit or as a result of the flush\noperation. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"persistandflushentity-anyentity--anyentity-promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"persistAndFlush(entity: AnyEntity | AnyEntity[]): Promise<void>")),(0,o.kt)("p",null,"Shortcut for ",(0,o.kt)("inlineCode",{parentName:"p"},"persist")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"flush"),"."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"persistlaterentity-anyentity--anyentity-void"},(0,o.kt)("inlineCode",{parentName:"h4"},"persistLater(entity: AnyEntity | AnyEntity[]): void")),(0,o.kt)("p",null,"Shortcut for just ",(0,o.kt)("inlineCode",{parentName:"p"},"persist"),", without flushing. Deprecated, use ",(0,o.kt)("inlineCode",{parentName:"p"},"em.persist()"),"."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"flush-promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"flush(): Promise<void>")),(0,o.kt)("p",null,"Flushes all changes to objects that have been queued up to now to the database."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"removewhere-anyentity--referenceanyentity--anyentity--referenceanyentity-promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"remove(where: AnyEntity | Reference<AnyEntity> | (AnyEntity | Reference<AnyEntity>)[]): Promise<void>")),(0,o.kt)("p",null,"It queues entity for removal when flush or commit is called."),(0,o.kt)("p",null,"This method fires ",(0,o.kt)("inlineCode",{parentName:"p"},"beforeDelete")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"afterDelete")," hooks."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"removeandflushentity-anyentity-promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"removeAndFlush(entity: AnyEntity): Promise<void>")),(0,o.kt)("p",null,"Shortcut for ",(0,o.kt)("inlineCode",{parentName:"p"},"remove")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"flush"),"."),(0,o.kt)("p",null,"This method fires ",(0,o.kt)("inlineCode",{parentName:"p"},"beforeDelete")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"afterDelete")," hooks. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"removelaterentity-anyentity-void"},(0,o.kt)("inlineCode",{parentName:"h4"},"removeLater(entity: AnyEntity): void")),(0,o.kt)("p",null,"Shortcut for ",(0,o.kt)("inlineCode",{parentName:"p"},"remove")," without flushing. Deprecated, use ",(0,o.kt)("inlineCode",{parentName:"p"},"em.remove()"),"."),(0,o.kt)("p",null,"This method fires ",(0,o.kt)("inlineCode",{parentName:"p"},"beforeDelete")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"afterDelete")," hooks. "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"canpopulateproperty-string-boolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"canPopulate(property: string): boolean")),(0,o.kt)("p",null,"Returns whether given entity has given property which can be populated (is reference or\ncollection)."),(0,o.kt)("hr",null))}m.isMDXComponent=!0}}]);